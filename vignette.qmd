---
title: "An Introdution to Geospatial Data Structures"
author: 'Yibo Liang, Pippa Lin, Chris Zhao'
date: December 3, 2023
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
```

## Abstract

In this project, we navigate the geospatial data structures through the `sf` package in RStudio. First, we focus on a detailed exploration of spatial objects, highlighting their creation and practical applications. We use visualization techniques, exemplifying how to represent clusters as polygons, map U.S. states, and associate species with locations, showing the geospatial data structures in visualization and analysis. Additionally, a brief overview of spatial Poisson modeling is provided on how to model and predict.

## Table of Contents

[1. The "sf" Package]

[2. Using sf Objects to Record GeoSpatial Polygons]

[3. Creating a 2D Polygon on Real Data]

[4. Modeling with Geospatial Data: Spatial Poisson Model]

[5. Conclusion]

## Summary

This Vignette provides a comprehensive introduction to geospatial data structures using the "sf" package in R. We begins by introducing basic spatial structures within the "sf" package, including points, lines, and polygons.

We'll illustrate how to convert vector data into "sf" objects, creating 2D polygons that represent clusters of geographical points. Although many methods of Geospatial Data are complex, we will explore two simple methods: cluster grouping, which condenses data into 2D polygons, and centroid polygons, which separate data points in dense clusters.

A real-world example follows, demonstrating the creation of a 2D polygon map of the United States using "sf" objects. Furthermore, the integration of attributes with geospatial data is demonstrated by associating invasive species [data](https://www.kaggle.com/datasets/lazaro97/biological-invasions) with states, allowing for efficient filtering and visualization.

Finally, we will briefly explore modeling with geospatial data, introducing a spatial Poisson model to predict species occurrences. The process involves preparing a spatial weights matrix, building the model, and making predictions based on the spatial Poisson model. However, this process is complex and require massive computing power to execute. Therefore, we leave it to the readers to further explore this topic.

## 1. The "sf" Package

The R-package we will be using for this demonstration is the "sf" package. It adopts the "Simple Features" formal standard, outlining a storage and access model for spatial geometries such as points, lines, and polygons. A geometry is considered simple when it comprises points connected by straight line segments and avoids self-intersections.

```{r, results='hide'}
library(sf)
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(dplyr)
library(ggmap)
library(leaflet)
library(concaveman)
```

### 1.1 Basic Spatial Structures in "sf"

Some of the basic spatial objects that are in the "sf" package for dealing with vector spatial data include:

-   Points: 2D or 3D data consisting of a single coordinate or a set of coordinates.

-   Lines: A line object is a spaghetti collection of 2D coordinates

    -   A Lines object is a list of one or more line objects, for example all the contours at a single elevation.

-   Polygons: A Polygon object is a spaghetti collection of 2D coordinates with equal first and last coordinates

    -   A Polygons object is a list of one or more Polygon objects, for example islands belonging to the same country.

![](images/geomtry.png)

A simple feature object is stored as a "sf" object. The image above is a visualization of the "sf" objects.

### 1.2 Creating a "sf" object

Let's create an example "sf" line object. A line object is characterized by points in some coordinate space and connected by a chord we call line.

First, we will define the lines themselves with `st_linestring()`

```{r}
lnstr_sfg1 <- st_linestring(matrix(runif(10), ncol=2)) # a line with 10 points
lnstr_sfg2 <- st_linestring(matrix(runif(10), ncol=2)) # ncol = 2 specifies the dimension
```

Next, we will combine the two lines into a single feature before transforming it into a single "sf" object.

```{r}
(lnstr_sfc <- st_sfc(lnstr_sfg1, lnstr_sfg2)) # just one feature here
```

Now that we have 2 lines combined into a single feature, we haven't actually assigned any meaning to the 2 lines yet. Let's give them some attributes! Let's pretend that these two lines are a highway and we they each have an attribute \`car_per_hour\` describing the number of cars that travels through them every hour.

```{r}
dfr <- data.frame(id = c("hwy1", "hwy2"),
                  cars_per_hour = c(78, 22)) 
(lnstr_sf <- st_sf(dfr , lnstr_sfc)) # 2 lines each with an attribute cars_per_hour
```

Now we have a data-frame that associates an attribute to a spatial structure rather than another data point!

```{r}
ggplot() +
  geom_sf(data = lnstr_sf["id"]) +
    theme_minimal()
```

## 2. Using sf Objects to Record GeoSpatial Polygons

With Geospatial Data structures, one can give geographical meaning to their data.

![](images/800px-RTree-Visualization-3D.svg.png)

We will explore two simple ways to record geospatial data. Two dimensional polygons using border data and 2 dimension polygons using centroid data.

### 2.1 2D Polygons using Vector (Border) Data

Now that we understand how to create a sf object; let's demonstrate an sf object that contains geospatial meaning. Let's take 3 clusters of vector points a, b, and c and showcase the utility of the sf object.

```{r, echo=FALSE}
P <- structure(list(
  ID = c(
    "13-57-43", "13-58-18", "13-58-49", "13-59-14",
    "13-59-48", "14-00-13", "14-00-40", "14-01-03", "14-01-25", "14-01-52",
    "14-02-13", "14-02-43", "14-03-08", "14-03-39", "14-04-03", "14-04-32",
    "14-05-06", "14-05-41", "14-06-14", "14-06-40", "14-07-03", "14-07-34",
    "14-08-09", "14-08-42", "14-09-10", "14-09-40", "14-10-11", "14-11-02",
    "14-11-26", "14-11-47", "14-12-12", "14-12-34", "14-12-58", "14-13-25",
    "14-13-50", "14-14-28", "14-14-48", "14-15-11", "14-15-39", "14-16-02",
    "14-16-30", "14-16-53", "14-17-28", "14-28-23", "14-28-45", "14-29-09",
    "14-29-31", "14-30-27", "14-31-45", "14-32-11", "14-32-32", "14-32-54",
    "14-33-22", "14-33-45", "14-34-07", "14-34-33", "14-34-57", "14-35-17",
    "14-35-59", "14-36-24", "14-36-42", "14-37-24", "14-38-44", "14-39-09",
    "14-39-30", "14-39-56", "14-40-21", "14-40-43", "14-41-12", "14-41-49",
    "14-42-10", "14-42-37", "14-43-30", "14-43-58", "14-44-29", "14-45-08",
    "14-55-55", "14-56-37", "14-56-54", "14-57-12", "14-57-33", "14-58-20",
    "14-58-42", "14-59-03", "14-59-26", "14-59-50", "15-00-12", "15-00-45",
    "15-01-09", "15-01-30", "15-01-52", "15-02-13", "15-02-53", "15-03-17",
    "15-03-46", "15-04-06", "15-04-27", "15-04-48", "15-05-19", "15-05-42",
    "15-06-03", "15-06-29", "15-06-49", "15-07-11", "15-07-30", "15-07-54",
    "15-08-14", "15-08-34", "15-09-01", "15-09-19", "15-09-47", "15-10-13"
  ), lon = c(
    195905.778820844, 195905.974267758, 195906.521347454,
    195906.899081334, 195907.794221085, 195908.278097475, 195906.749400405,
    195905.530462325, 195904.169532708, 195903.415217152, 195902.583546779,
    195901.705310906, 195900.676225893, 195899.811829397, 195899.105876732,
    195898.496875417, 195897.417855528, 195896.305319914, 195894.789791642,
    195893.792658586, 195892.846626664, 195892.588160285, 195892.653321993,
    195893.352612261, 195893.325522819, 195892.724380256, 195895.024853343,
    195897.346640149, 195897.522357658, 195897.49907462, 195897.236040002,
    195897.483304948, 195898.30751539, 195899.333731338, 195899.575391337,
    195899.568317725, 195899.64883718, 195899.793165198, 195899.696078815,
    195899.772957444, 195899.71964308, 195901.848642919, 195904.020780265,
    195891.806884353, 195890.229643927, 195889.907273078, 195888.918089508,
    195888.469330492, 195888.697240747, 195887.928917165, 195886.736953866,
    195885.973581512, 195885.327462551, 195884.773745579, 195883.787523878,
    195882.808838648, 195881.820022116, 195881.159939463, 195880.535525829,
    195880.22736261, 195880.16798173, 195880.88351761, 195882.179482257,
    195881.58913656, 195882.244999483, 195883.07501506, 195882.431452093,
    195881.986614064, 195881.56612941, 195883.849986501, 195884.85633537,
    195886.271839823, 195887.256976464, 195889.473852909, 195890.964940259,
    195891.764793086, 195880.614164185, 195880.358714986, 195879.807625943,
    195879.063338423, 195878.122326135, 195877.507258557, 195876.493683828,
    195876.054792449, 195875.626907971, 195874.947148117, 195874.569675939,
    195875.073433679, 195875.336685869, 195874.99480784, 195874.243786076,
    195874.030479338, 195873.822854543, 195873.49650797, 195872.808159092,
    195872.126629216, 195871.945624596, 195872.299770002, 195871.828658921,
    195872.189569543, 195872.009561096, 195871.688583655, 195872.936862676,
    195873.688142326, 195874.526086933, 195875.189198156, 195875.987541361,
    195876.451614305, 195876.949504315, 195877.49530275, 195878.860639032,
    195879.976589664
  ), lat = c(
    111925.087000872, 111924.746783252,
    111925.124000667, 111925.657795159, 111926.37396592, 111927.243937231,
    111927.492050366, 111927.580125541, 111927.540078711, 111928.148808956,
    111928.507004102, 111928.958462953, 111928.795704281, 111928.416179694,
    111928.56341283, 111928.766807706, 111928.924355094, 111928.910363058,
    111928.735907397, 111928.555450567, 111927.602310046, 111926.627976733,
    111926.154476976, 111926.535614232, 111925.940498663, 111925.246247372,
    111924.770627489, 111924.617882809, 111925.549537431, 111926.057332371,
    111926.169132436, 111926.810872482, 111926.802022958, 111926.558136608,
    111926.909623143, 111927.053772844, 111926.023246794, 111925.596421076,
    111925.219743649, 111924.848264531, 111924.299745381, 111924.183837869,
    111924.031228296, 111926.499693359, 111926.835912733, 111927.529247485,
    111927.931058974, 111928.262019288, 111929.355476192, 111929.588004993,
    111930.09344381, 111929.968575835, 111930.728207498, 111931.031143297,
    111931.689976808, 111932.506147532, 111932.746288973, 111932.722016854,
    111932.691102536, 111931.953822562, 111931.330709156, 111930.868375568,
    111931.817410667, 111930.581975062, 111931.070356929, 111929.611758211,
    111929.75447942, 111929.79541798, 111929.963250504, 111928.765700747,
    111928.158538985, 111926.958042713, 111927.173583846, 111926.498736853,
    111925.88847469, 111925.428917548, 111933.002101255, 111933.629642985,
    111934.153987348, 111935.017048392, 111935.705555274, 111936.292398511,
    111936.273914415, 111935.606822579, 111935.480749928, 111935.979567816,
    111936.252055673, 111936.397532031, 111936.914787345, 111937.462629294,
    111938.127551995, 111938.18262708, 111939.005547066, 111939.678609986,
    111940.11859558, 111939.925228463, 111939.338239755, 111938.820578336,
    111938.849445301, 111938.448843605, 111938.263539459, 111937.703195091,
    111936.385157215, 111935.722993995, 111934.915332276, 111934.351638136,
    111933.730103048, 111934.056092041, 111933.449662705, 111932.908020631,
    111932.870581986, 111932.607247015
  ), Fr = c(
    "a", "a", "a",
    "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
    "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
    "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a",
    "a", "a", "a", "a", "a", "a", "a", "b", "b", "b", "b",
    "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b",
    "b", "b", "b", "b", "b", "b", "b", "b", "b", "b", "b",
    "b", "b", "b", "b", "b", "b", "b", "c", "c", "c", "c",
    "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c",
    "c", "c", "c", "c", "c", "c", "c", "c", "c", "c", "c",
    "c", "c", "c", "c", "c", "c", "c", "c", "c", "c"
  ),
  Type = c(
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C", "C",
    "C", "C", "C", "C", "C", "C"
  )
), row.names = c(NA, -112L), class = "data.frame")



library(sf)
#> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE
library(tidyverse)

P <- P %>% st_as_sf(
  coords = c("lon", "lat"),
  crs = 31370
)

ggplot(P) +
  geom_sf(aes(color = Fr))
```

Looking at the points above, there is clearly some implicit relationship between the point clusters. However, it would be incredibly difficult to identify the clusters if there were more points and more variables.

Location gets increasingly difficult to keep track of as we get higher and higher dimensions in our dataframe. Therefore, instead of keeping every coordinate of the location, we can keep the geometries themselves as objects in the dataframe.

Going back to the previous example, using the sf package, we can then treat these cluster points as coordinate points and draw a polygon. The reason why we call is the border points is that these vectors quite literally draw the borders of the area that encapsulates the data points.

```{r}
# Use the concave pacakge to visualize the sf object after grouping
x <- P$Fr[1]

final_P <- lapply(unique(P$Fr), function(x) {
  group <- P[P$Fr == x, ]
  conc <- concaveman::concaveman(group, length_threshold = 0,
                                 concavity = 0.999999)
  conc$Fr <- x
  conc
}) %>% bind_rows()

# plot the graph
ggplot(final_P) +
  geom_sf(aes(fill = Fr)) +
  geom_sf(data = P, fill=NA, shape=21, size=0.7) 

```

The datapoints are recorded as 2D polygons. The graph above gives a visual representation of what the "sf" package is doing to our data structure.

### 2.2 2D Polygons Using Centroids

The first method is useful for when we want to group data points. The Centroid method is more useful for when we want to separate the data. Consider the following cluster:

```{r}
# Generate some centroids
centroids <- st_make_grid(what="centers") %>% st_sf()
plot(centroids)
```

Centroid polygons are useful for when we want to distinguish individual data points in a dense cluster like the one above. We can define a border for each point and we are able to effectively separate the points.

```{r}
# Make a new grid from them
cellSize <- 10
grid <- (st_bbox(centroids) + cellSize/2*c(-1,-1,1,1)) %>%
  st_make_grid(cellsize=c(cellSize, cellSize)) %>% st_sf()

ggplot() + geom_sf(data=grid) + geom_sf(data=centroids)

```

TL:DR, we have gone over two techniques in storing geospatial data. Cluster grouping condenses the dataframe into 2D polygons; on the other hand, drawing polygons around centroids expands the dataframe into 2D polygons.

## 3. Creating a 2D Polygon on Real Data

Using everything we've discussed so far, let's draw a geospatial map. First we will load in a vector of coordinates.

```{r, echo=FALSE}
us_geo <- read_csv("data/dat_spatial.csv")
us_geo <- us_geo %>% 
  filter(name != "Hawaii" & name != "Alaska")
```

```{r}
us_geo
```

What we have just loaded in is a dataframe containing the 48 States (Sorry Hawaii and Alaska) and their latitudes and longitudes of points along their perimeter.

However, a vector of coordinates is hard to interpretate. Therefore, we can convert this vector data into geospatial data by creating a "sf" object.

```{r}
SQ_example <- st_as_sf(us_geo, wkt = "geometry")
str(SQ_example)
```

Now, the `geometry` column has been converted into a geospatial object - a 2D Polygon. In other words, each entry on in our dataframe is now associated with a location Earth. Instead of keeping thousands of points on a graph, we group these points into geometric objects using the technique demonstrated in section 2.1. In fact, it is easy to see what we mean by this if we just plot it out:

```{r}
ggplot() +
  geom_sf(data = SQ_example["name"]) +
    theme_minimal() +
    labs(title = "Map of the U.S. Using sf Polygons")
```

### 3.1 Geospatial Dataframe with Attributes

The most important aspect of geospatial data is that we can give attributes to these individual objects. Let's load in a dataframe consisting of invasive mammals, reptiles, and amphibians in the U.S. from 1950's to the 2000's.

```{r}
us_species <- read_csv("data/dat_species.csv")
us_species <- us_species %>%  # filtering out everything we don't need.
  filter(year >= "1950") %>% 
  filter(group == "Mammals"| group == "Reptiles" | group == "Amphibians")
```

Now, normally we would perform some sort of joining operation on our `us_geo` dataframe and our `us_species` dataframe to study the relationship between invasive speices in respect to each state. However, geospatial data allows us to associate the invasive species to a location- a `geometry` object- rather than a `state` variable.

```{r, echo=FALSE, results='hide'}
colnames(us_geo)[1] <- "state"
us_geo_merged <- merge(us_geo,us_species,by="state", all=T)
names(us_geo_merged) 
```

```{r, echo=FALSE}
us_geo_merged <- us_geo_merged[is.na(us_geo_merged$geometry) == FALSE, ]

# Create an sf object (SQ) from the WKT geometries
SQ <- st_as_sf(us_geo_merged, wkt = "geometry")
SQ1 <- st_as_sf(us_geo, wkt = "geometry")
```

```{r}
# Check the structure of SQ
str(SQ)
unique(us_geo_merged$sciname)
```

Again, the `geometry` column is consisted of a "sf" object; whereas previously, it was a state with a vector of coordinates. However, each data entry is also given a collection of attributes such as `sciname`, `kingdom`, `occurrence`, and etc. Let's see how we can reference these attributes within each state ("sf" object). Within our `us_species` data frame, there is a species named `Hydrochoerus hydrochaeris` more commonly known as the capybara.

![](images/capybara-square-1.jpg.optimal.jpg){width="500"}

By indexing on species name, we can reference the capybara directly by location of the "sf" objects.

```{r}
SQ_f <- SQ %>%
  filter(sciname == "Hydrochoerus hydrochaeris") %>% 
  filter(year <= 2015) %>% 
  group_by(state) %>% 
  summarise(occurrence = sum(occurrence))

  # Create a ggplot object
ggplot() +
  # Add the filtered sf object as a layer
  geom_sf(data = SQ1["state"]) +
  geom_sf(data = SQ_f, aes(fill = occurrence)) +
        
  # Customize the plot as needed
  theme_minimal() +
    labs(title = "Occurrences Plot")
```

As one can see, "sf" objects are extremely great in the context of visualization. Each location is treated as an individual data point; thus, we are filtering and parsing the data in terms of the locations themselves. In order to demonstrate this, we have created a simple [ShinyApp](https://yibster.shinyapps.io/gisshinyapp/) to illustrate the use of geospatial data structures in data visualization.

## 4. Modeling with Geospatial Data: Spatial Poisson Model

```{r}
library(sf)
library(spdep)
library(ggplot2)
```

We can predict the number appearances of a species using spatial poisson model. Here we will explain how it works and provide some example codes about the model building, you can copy and paste them to try!

### 4.1 Model Preparation

First, we use spatial weights matrix to represent the relationships between states. The matrix captures the neighbor states of the state we want to predict on, and their correlation:

```{r, eval = FALSE}
# Create spatial weights matrix  
w <- knn2nb(knearneigh(st_coordinates(your_dataset)))  
W <- nb2listw(w)`
```

`st_coordinates()`: This extracts the coordinates from the 'geometry' column of the **`your_dataset`**. It gives a matrix containing the X and Y coordinates for each observation. If you have points, these will be the point coordinates; if you have polygons, these will be the centroid coordinates.

`knearneigh()`: This function computes the k-nearest neighbors for each point based on Euclidean distance. It returns a "knn" object that represents the k-nearest neighbors relationships. The **`k`** parameter is not specified in this code.

`nb2listw()`: This function converts the knn object into a spatial weights matrix using a k-nearest neighbor rule. It creates a binary spatial weights matrix where neighboring points are considered neighbors. The resulting object **`w`** is a representation of the neighborhood relationships among the observations.

### 4.2 Model Building

Now, we can fit a spatial Poisson on the dataset

```{r,  eval = FALSE}
spatial_poisson_model <- errorsarlm(count ~ 1, data = frog_data_sf, W = W, family = poisson)
```

**`W = W:`** It means the spatial weights matrix to account for spatial autocorrelation, in this case W is generated from knn.

### 4.3 Prediction

```{r,  eval = FALSE}
# Predict occurrences using the spatial Poisson model
predictions <- predict(spatial_poisson_model, newdata = new_data, type = "response")
```

For more information, refer to this link:

<https://apwheele.github.io/Class_CrimeMapping/08_Tutorial_R_SpatRegression.html>

## 5. Conclusion

In conclusion, this vignette introduced the geospatial data structure, the "sf" package in R, and modeling for geospatial data. The document provides insights into creating "sf" objects, emphasizing their capacity to incorporate both geometric and attribute data. It compares two methods: cluster grouping condenses border data into 2D polygons, while centroid polygons isolate data points in dense clusters by drawing an area around each centroid. Real-world applications include constructing a 2D polygon map of the U.S., showcasing the efficiency of geospatial data structures in visualization and data association. In our example of invasive species in the U.S., we showed how geospatial data allows us to associated the invasive species to a location with a high dimensional vector object, and how to visualize the result. In the end, we provided a simple example of building Poisson model for predicting counts in a specific location using geospatial data structure. As geospatial data structures may be unfamiliar to many, we briefly touched on modeling, but we invite you to enhance your understanding by creating and experimenting with a simple geospatial dataset.
